import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout, BatchNormalization
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint

# Setare pentru calea directoarelor
train = r'C:\Users\Catinca\Desktop\malware\malware_dataset\train'
val = r'C:\Users\Catinca\Desktop\malware\malware_dataset\val'

# Generator de date pentru antrenament cu redimensionare și augmentare minimă
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True
)

# Generator de date pentru validare
validation = ImageDataGenerator(rescale=1./255)

# Crearea generatorilor care încarcă imaginile direct din foldere
train_generator = train_datagen.flow_from_directory(
    train,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

validation_generator = validation.flow_from_directory(
    val,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

# Utilizarea MobileNetV2 ca model de bază, înghețarea straturilor preantrenate
model_base = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
model_base.trainable = False

# Adăugarea straturilor superioare
model = Sequential([
    model_base,
    GlobalAveragePooling2D(),
    Dense(1024, activation='relu'),
    BatchNormalization(),
    Dropout(0.5),
    Dense(31, activation='softmax')
])

model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])

reduce = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=3, min_lr=0.0001)

# Callback pentru salvarea checkpoint-urilor
checkpoint_callback = ModelCheckpoint(
    'malware_model_checkpoint.keras', save_best_only=True, monitor='val_accuracy', mode='max'
)

# Antrenarea modelului
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=validation_generator,
    callbacks=[reduce, checkpoint_callback]
)

# Vizualizarea curbelor de acuratețe și pierdere
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs_range = range(10)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Antrenare acuratete')
plt.plot(epochs_range, val_acc, label='Validare acuratete')
plt.legend(loc='dreapta jos')
plt.title('Precizia antrenarii si validarii')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Pierdere antrenament')
plt.plot(epochs_range, val_loss, label='Pierdere validare')
plt.legend(loc='dreapta sus')
plt.title('Pierderea antrenarii si validarii')
plt.show()

# Evaluarea modelului
rezultat = model.evaluate(validation_generator)
print(f"Test Loss: {rezultat[0]} - Test Accuracy: {rezultat[1]}")

# Salvarea modelului în formatul recomandat
model.save('high_accuracy_malware_model.keras')